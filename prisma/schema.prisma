// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  username String @unique
  email String @unique
  password String
  twofactor Boolean @default(false)
  channels Channel[]
  profileId Profile?
  isonline Boolean @default(false)
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  freinds Freinds[]
  gamesAsPlayer1 Game?   @relation("Player1Games")
  gamesAsPlayer2 Game?   @relation("Player2Games")
  channelMembers ChannelMember[]


}
model Channel {
  id          Int      @id @default(autoincrement())
  name String @unique
  password String
  owner_role Role @default(ADMIN)
  type Mode @default(PUBLIC)
  topic String
  owner   User   @relation(fields: [owner_id], references: [id])
  owner_id Int
  channel_memebers ChannelMember[]

}
model ChannelMember {
  id          Int      @id @default(autoincrement())
  // Define a many-to-one relationship with the user who is a member of the channel
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  // Define a many-to-one relationship with the channel that the user is a member of
  channel     Channel  @relation(fields: [channelId], references: [id])
  channelId   Int

  // Add any other fields related to the channel membership as needed
}

model Profile {
  id          Int      @id @default(autoincrement())
  fullName    String
  rank        Int
  pictureUrl  String
  biography   String
  user User @relation(fields: [userId],references:[id])
  userId      Int      @unique
}

model Freinds {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int @unique

}

model Game {
  id            Int       @id @default(autoincrement())
  player1Id     Int @unique
  player2Id     Int @unique
  score         String
  status        String
  player1       User      @relation("Player1Games", fields: [player1Id], references: [id])
  player2       User      @relation("Player2Games", fields: [player2Id], references: [id])

  createdAt     DateTime  @default(now())
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum Mode {
  PUBLIC
  PRIVATE
  PROTECTED
}
